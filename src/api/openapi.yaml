openapi: 3.1.0
info:
  description: "# Introduction\n\nThe Bridge API serves as a REST interface which\
    \ is able to fetch content, product and category information from any shop backend\
    \ and to display them in reports in the FirstSpirit ContentCreator.\n\nIn order\
    \ to connect the Bridge API with a given shop backend a Bridge is needed.\nIt\
    \ acts as a microservice between the shop backend and FirstSpirit.\nFurther information\
    \ about how to implement and use a Bridge can be found in the official [documentation](https://docs.e-spirit.com/ecom/fsconnect-com/FirstSpirit_Connect_for_Commerce_Documentation_EN.html).\n\
    \n# Authentication\n\nThe Bridge API supports HTTP Basic Authentication in order\
    \ to secure the API endpoints.\nIn this case it expects a specific HTTP header\
    \ where the client credentials are encoded in base64. Client credentials consist\
    \ of a custom username and password.\n\nExample:\n```\ncurl -u username:password\
    \ -i -H 'Accept:application/json' http://example.com\n```\n\nThe Bridge itself\
    \ requires Basic Auth to provide a secure data exchange with FirstSpirit.\n\n\
    # Errors\n\nSuccess or failure of an API request is indicated by HTTP status codes.\n\
    Status codes starting with ```2xx``` indicate success whereas codes starting with\
    \ ```4xx``` or ```5xx``` indicate that an error occured.\n\n| Status Code    \
    \   | Description                                                            \
    \    |\n|-------------------|----------------------------------------------------------------------------|\n\
    |      200          | The request was successful.                            \
    \                    |\n|      201          | The request was successful and the\
    \ resource was created/updated.           |\n|      400          | The request\
    \ failed due to incorrect or missing parameters.                 |\n|      401\
    \          | The request failed due to invalid or missing authentication credentials.\
    \   |\n|      404          | The requested resource doesn't exist.           \
    \                           |\n|      500          | The request failed due to\
    \ an internal server error.                        |\n\n# Legal Notices\n\nThe\
    \ Connect for Commerce Bridge API is a product of [Crownpeak Technology GmbH](https://www.crownpeak.com),\
    \ Dortmund, Germany. The Connect for Commerce Bridge API is subject to the Apache-2.0\
    \ license.\n\n## Third-Party Software Products\n\n| Software        | License\
    \                                                                           |\n\
    |-----------------|-----------------------------------------------------------------------------------|\n\
    |    ReDoc        | [MIT License](https://github.com/Redocly/redoc/blob/main/LICENSE)\
    \                 |\n|    Montserrat   | [Open Font License](https://github.com/JulietaUla/Montserrat/blob/master/OFL.txt)\
    \ |\n"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: FirstSpirit Connect for Commerce - Bridge API
  version: 3.3.0
  x-logo:
    altText: Crownpeak Technology GmbH Logo
    url: crownpeak-Logo-Full-Color.png
servers:
- url: /api
security:
- basicAuth: []
tags:
- description: The Categories endpoint fetches all available categories from any given
    shop backend which can be displayed in the category report inside the FirstSpirit
    ContentCreator. It is not intended to process all available category information
    from the shop backend.
  name: Categories
- description: |
    The Content endpoint fetches all available content pages from any given shop backend which can be displayed in the content report inside the FirstSpirit ContentCreator.
  name: Content
- description: The Mapping endpoint provides the mapping between a page in FirstSpirit
    and a page in the shop system. It is used to either construct a Storefront URL
    based on given identifier properties in FirstSpirit or deconstruct a given Storefront
    URL to return an identifier. This identifier is used to identify the page in FirstSpirit.
  name: Mapping
- description: The Products endpoint fetches product information from any given shop
    backend which can be displayed in the product report inside the FirstSpirit ContentCreator.
    It is not intended to provide all available product information from the shop
    backend.
  name: Products
paths:
  /categories:
    get:
      description: "Returns all available categories from the shop backend in the\
        \ specified language.\n\nIf the specified language is not defined for a category\
        \ or none was set, it displays all categories in the master language by default."
      operationId: categoriesGet
      parameters:
      - description: "Expect this header to be sent to the bridge, containing the\
          \ FirstSpirit Project UUID"
        example: 11111111-aaaa-2222-bbbb-333333333333
        in: header
        name: X-FS-Project-UUID
        schema:
          type: string
      - description: Filter by parentId. It returns all related categories and subcategories
          from the category tree.
        in: query
        name: parentId
        schema:
          type: string
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/lang'
      - $ref: '#/components/parameters/page'
      responses:
        "200":
          content:
            application/json:
              examples:
                Categories:
                  $ref: '#/components/examples/Categories'
                  description: Categories
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Labelled'
          description: Categories
          headers:
            X-HasNext:
              $ref: '#/components/headers/hasNext'
              style: simple
            X-Total:
              $ref: '#/components/headers/total'
              style: simple
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "501":
          $ref: '#/components/responses/NotImplementedError'
      security:
      - basicAuth: []
      summary: Get Categories
      tags:
      - Categories
  /categories/ids:
    head:
      description: "Checks if the [Categories IDs endpoint](#/Categories/categoriesCategoryIdsGet)\
        \ is implemented.\n\n"
      operationId: categoriesCategoryIdsHead
      responses:
        "200":
          description: Categories IDs endpoint exists.
        "404":
          description: Categories IDs endpoint doesn't exist.
      security:
      - basicAuth: []
      summary: Check for Categories IDs endpoint
      tags:
      - Categories
  /categories/ids/{categoryIds}:
    get:
      description: Returns a list of categories from the shop backend that match the
        given categoryIds.
      operationId: categoriesCategoryIdsGet
      parameters:
      - description: "Expect this header to be sent to the bridge, containing the\
          \ FirstSpirit Project UUID"
        example: 11111111-aaaa-2222-bbbb-333333333333
        in: header
        name: X-FS-Project-UUID
        schema:
          type: string
      - $ref: '#/components/parameters/categoryIds'
      - $ref: '#/components/parameters/lang'
      responses:
        "200":
          content:
            application/json:
              examples:
                Category List:
                  $ref: '#/components/examples/CategoryListById'
                  description: Category List
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Labelled'
          description: List of Categories or `null` if it does not exist.
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "501":
          $ref: '#/components/responses/NotImplementedError'
      security:
      - basicAuth: []
      summary: Get list of Categories by their IDs.
      tags:
      - Categories
  /categories/tree:
    get:
      description: "Returns the category tree in the specified language.\n\nIf the\
        \ specified language is not defined for a category or none was set, it displays\
        \ all categories in the master language by default."
      operationId: categoryTreeGet
      parameters:
      - description: "Expect this header to be sent to the bridge, containing the\
          \ FirstSpirit Project UUID"
        example: 11111111-aaaa-2222-bbbb-333333333333
        in: header
        name: X-FS-Project-UUID
        schema:
          type: string
      - description: Filter by parentId
        in: query
        name: parentId
        schema:
          type: string
      - $ref: '#/components/parameters/lang'
      responses:
        "200":
          content:
            application/json:
              examples:
                Category Tree:
                  $ref: '#/components/examples/CategoryTree'
                  description: Category Tree
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: Category Tree
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "501":
          $ref: '#/components/responses/NotImplementedError'
      security:
      - basicAuth: []
      summary: Get Category Tree
      tags:
      - Categories
    head:
      description: "Checks if the category tree endpoint is available. It is activated\
        \ by default.\n\nIf it is not available, the dropdown for the category tree\
        \ in the ContentCreator is not displayed in both the category and the product\
        \ report."
      operationId: categoryTreeHead
      responses:
        "200":
          description: Category tree endpoint exists
        "404":
          description: Category tree endpoint doesn't exist
        "500":
          $ref: '#/components/responses/InternalServerError'
        "501":
          $ref: '#/components/responses/NotImplementedError'
      security:
      - basicAuth: []
      summary: Support Category Tree
      tags:
      - Categories
  /content:
    get:
      description: Returns a pageable list of Content Pages which can be filtered
        using the query parameters listed below.
      operationId: contentGet
      parameters:
      - description: "Expect this header to be sent to the bridge, containing the\
          \ FirstSpirit Project UUID"
        example: 11111111-aaaa-2222-bbbb-333333333333
        in: header
        name: X-FS-Project-UUID
        schema:
          type: string
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/lang'
      - $ref: '#/components/parameters/page'
      responses:
        "200":
          content:
            application/json:
              examples:
                Content Page List:
                  $ref: '#/components/examples/ContentPageList'
                  description: Content Page List
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Extracted'
          description: List of Content Pages
          headers:
            X-HasNext:
              $ref: '#/components/headers/hasNext'
              style: simple
            X-Total:
              $ref: '#/components/headers/total'
              style: simple
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "501":
          $ref: '#/components/responses/NotImplementedError'
      security:
      - basicAuth: []
      summary: Get a list of Content Pages
      tags:
      - Content
    head:
      description: |-
        Checks if the Content Report exists in the FirstSpirit module.

        The Content Report is used to display existing Content Pages from the shop in FirstSpirit. By default the Content Report is activated.
      operationId: contentHead
      responses:
        "200":
          description: Content Report exists
        "404":
          description: Content Report doesn't exist
      security:
      - basicAuth: []
      summary: Support Content Report
      tags:
      - Content
    post:
      description: Create a new Content Page in the storefront and its page reference
        in FirstSpirit.
      operationId: contentPost
      parameters:
      - description: "Expect this header to be sent to the bridge, containing the\
          \ FirstSpirit Project UUID"
        example: 11111111-aaaa-2222-bbbb-333333333333
        in: header
        name: X-FS-Project-UUID
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              Content Page:
                $ref: '#/components/examples/ContentPageLocalized'
                description: Content Page
            schema:
              $ref: '#/components/schemas/Content'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                Content Page:
                  $ref: '#/components/examples/ContentPageResponse'
                  description: Content Page
              schema:
                $ref: '#/components/schemas/IdProviding'
          description: Identifier Object
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "501":
          $ref: '#/components/responses/NotImplementedError'
      security:
      - basicAuth: []
      summary: Create Content Page
      tags:
      - Content
  /content/ids/{contentIds}:
    get:
      description: Returns a list of Content Pages which match the given contentIds.
      operationId: contentContentIdsGet
      parameters:
      - description: "Expect this header to be sent to the bridge, containing the\
          \ FirstSpirit Project UUID"
        example: 11111111-aaaa-2222-bbbb-333333333333
        in: header
        name: X-FS-Project-UUID
        schema:
          type: string
      - $ref: '#/components/parameters/contentIds'
      - $ref: '#/components/parameters/lang'
      responses:
        "200":
          content:
            application/json:
              examples:
                Content Page List:
                  $ref: '#/components/examples/ContentPageListById'
                  description: Content Page List
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Extracted'
          description: List of Content Pages or `null` if it does not exist
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "501":
          $ref: '#/components/responses/NotImplementedError'
      security:
      - basicAuth: []
      summary: Get list of Content Pages by IDs
      tags:
      - Content
  /content/{contentId}:
    delete:
      description: Remove a Content Page from the Storefront and its page reference
        in FirstSpirit.
      operationId: contentContentIdDelete
      parameters:
      - description: Delete content page by contentId
        in: path
        name: contentId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Deletion successful
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "501":
          $ref: '#/components/responses/NotImplementedError'
      security:
      - basicAuth: []
      summary: Delete Content Page
      tags:
      - Content
    put:
      description: Edit information of a Content Page. Changes are reflected in both
        the storefront and in the page reference in FirstSpirit.
      operationId: contentContentIdPut
      parameters:
      - description: Update content page by contentId
        in: path
        name: contentId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              Content Page:
                $ref: '#/components/examples/ContentPageLocalized'
                description: Content Page
            schema:
              $ref: '#/components/schemas/Content'
        required: true
      responses:
        "201":
          description: Update successful
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "501":
          $ref: '#/components/responses/NotImplementedError'
      security:
      - basicAuth: []
      summary: Update Content Page
      tags:
      - Content
  /lookup-url:
    get:
      description: Returns an identifier for a given Storefront URL which is used
        in FirstSpirit to identify the page.
      operationId: lookupUrlGet
      parameters:
      - description: "Expect this header to be sent to the bridge, containing the\
          \ FirstSpirit Project UUID"
        example: 11111111-aaaa-2222-bbbb-333333333333
        in: header
        name: X-FS-Project-UUID
        schema:
          type: string
      - $ref: '#/components/parameters/url'
      responses:
        "200":
          content:
            application/json:
              examples:
                Product Page:
                  $ref: '#/components/examples/ProductPage'
                  description: Product Page
              schema:
                $ref: '#/components/schemas/IdentifierObject'
          description: "Identifier Object or `{}` if it does not exist."
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "501":
          $ref: '#/components/responses/NotImplementedError'
      security:
      - basicAuth: []
      summary: Get Storefront URL Identifier
      tags:
      - Mapping
  /products:
    get:
      description: Returns a pageable list of products from the shop backend which
        can be filtered using the query parameters listed below.
      operationId: productsGet
      parameters:
      - description: "Expect this header to be sent to the bridge, containing the\
          \ FirstSpirit Project UUID"
        example: 11111111-aaaa-2222-bbbb-333333333333
        in: header
        name: X-FS-Project-UUID
        schema:
          type: string
      - description: Filter by categoryId
        in: query
        name: categoryId
        schema:
          type: string
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/lang'
      - $ref: '#/components/parameters/page'
      responses:
        "200":
          content:
            application/json:
              examples:
                Product List:
                  $ref: '#/components/examples/ProductList'
                  description: Product List
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: List of Products
          headers:
            X-HasNext:
              $ref: '#/components/headers/hasNext'
              style: simple
            X-Total:
              $ref: '#/components/headers/total'
              style: simple
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "501":
          $ref: '#/components/responses/NotImplementedError'
      security:
      - basicAuth: []
      summary: Get list of Products
      tags:
      - Products
  /products/ids:
    head:
      description: "Checks if the [Products IDs endpoint](#/Products/productsProductIdsGet)\
        \ is implemented.\n\n"
      operationId: productsProductIdsHead
      responses:
        "200":
          description: Products IDs endpoint exists.
        "404":
          description: Products IDs endpoint doesn't exist.
      security:
      - basicAuth: []
      summary: Check for Products IDs endpoint
      tags:
      - Products
  /products/ids/{productIds}:
    get:
      description: Returns a list of products from the shop backend which match the
        given productIds.
      operationId: productsProductIdsGet
      parameters:
      - description: "Expect this header to be sent to the bridge, containing the\
          \ FirstSpirit Project UUID"
        example: 11111111-aaaa-2222-bbbb-333333333333
        in: header
        name: X-FS-Project-UUID
        schema:
          type: string
      - $ref: '#/components/parameters/productIds'
      - $ref: '#/components/parameters/lang'
      responses:
        "200":
          content:
            application/json:
              examples:
                Product List:
                  $ref: '#/components/examples/ProductListById'
                  description: Product List
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: List of Products or `null` if it does not exist
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "501":
          $ref: '#/components/responses/NotImplementedError'
      security:
      - basicAuth: []
      summary: Get list of Products by IDs
      tags:
      - Products
  /storefront-url:
    get:
      description: Returns a Storefront URL which is build out of the given identifier
        properties in FirstSpirit.
      operationId: storefrontUrlGet
      parameters:
      - description: "Expect this header to be sent to the bridge, containing the\
          \ FirstSpirit Project UUID"
        example: 11111111-aaaa-2222-bbbb-333333333333
        in: header
        name: X-FS-Project-UUID
        schema:
          type: string
      - $ref: '#/components/parameters/type'
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/lang'
      responses:
        "200":
          content:
            application/json:
              examples:
                Product Storefront Url:
                  $ref: '#/components/examples/StorefrontUrl'
                  description: Product Storefront Url
              schema:
                $ref: '#/components/schemas/StorefrontUrl'
          description: A Storefront URL or `null` if it does not exist.
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "501":
          $ref: '#/components/responses/NotImplementedError'
      security:
      - basicAuth: []
      summary: Get Storefront URL
      tags:
      - Mapping
components:
  examples:
    Categories:
      summary: Categories
      value:
      - id: cat-1
        label: Electronics
      - id: cat-2
        label: Cameras
      - id: cat-3
        label: Accessories
      - id: cat-4
        label: Headphones
    CategoryListById:
      summary: Category List
      value:
      - id: cat-1
        label: Electronics
      - id: cat-2
        label: Cameras
    CategoryTree:
      summary: Category Tree
      value:
      - children:
        - id: cat-1-1
          label: Smartphone
        - children:
          - id: cat-1-2-1
            label: Smartwatches
          id: cat-1-2
          label: Wearables
        id: cat-1
        label: Electronics
      - children:
        - id: cat-2-1
          label: DSLR Cameras
        - id: cat-2-2
          label: Action Cameras
        id: cat-2
        label: Cameras
    ContentPageList:
      summary: Content Page List
      value:
      - extract: /homepage/
        id: homepage
        label: Homepage
      - extract: /about-us/
        id: about
        label: About Us
      - extract: /faq/
        id: faq
        label: Frequently Asked Questions
      - extract: /landingpage/
        id: landingpage
        label: Landing Page
    ContentPageListById:
      summary: Content Page List By Id
      value:
      - extract: /homepage/
        id: homepage
        label: Homepage
      - extract: /about-us/
        id: about-us
        label: About Us
    ContentPageLocalized:
      summary: Content Page with localized values
      value:
        label:
          de: Startseite
          en: Homepage
        pageUid: homepage
        path:
          de: /startseite
          en: /homepage
        released: true
        template: content
    ContentPageResponse:
      summary: Content Page
      value:
        id: homepage
    ProductList:
      summary: Product List
      value:
      - extract: Camera
        id: prod-1
        image: https://mycommerce/prod-1/540/960
        label: PhotonFlare N389
        thumbnail: https://mycommerce/prod-1/160/120
      - extract: Camera
        id: prod-2
        image: https://mycommerce/prod-2/540/960
        label: Apex B756
        thumbnail: https://mycommerce/prod-2/160/120
      - extract: Camera
        id: prod-3
        image: https://mycommerce/prod-3/540/960
        label: Quantum A480
        thumbnail: https://mycommerce/prod-3/160/120
      - extract: Camera
        id: prod-4
        image: https://mycommerce/prod-4/540/960
        label: Specter K80H
        thumbnail: https://mycommerce/prod-4/160/120
    ProductListById:
      summary: Product List
      value:
      - extract: Camera
        id: prod-1
        image: https://mycommerce/prod-1/540/960
        label: PhotonFlare N389
        thumbnail: https://mycommerce/prod-1/160/120
      - extract: Camera
        id: prod-2
        image: https://mycommerce/prod-2/540/960
        label: Apex B756
        thumbnail: https://mycommerce/prod-2/160/120
    ProductPage:
      summary: Product Page
      value:
        id: prod-3
        lang: EN
        type: product
    StorefrontUrl:
      summary: Product Storefront URL
      value:
        url: /cameras/digital-cameras/832382
  headers:
    hasNext:
      description: "Is `true`, if one more pages exist"
      schema:
        type: boolean
    total:
      description: Number of total items
      schema:
        type: integer
  parameters:
    categoryIds:
      description: Get one or more categories by their categoryIds (comma-separated).
      example:
      - ""
      in: path
      name: categoryIds
      required: true
      schema:
        type: array
        items:
          type: string
    contentIds:
      description: Get one or more content pages by contentIds (comma-separated)
      example:
      - ""
      in: path
      name: contentIds
      required: true
      schema:
        type: array
        items:
          type: string
    id:
      description: Unique Identifier
      in: query
      name: id
      required: true
      schema:
        type: string
        pattern: "^[^,\\\\\\s]+$"
    lang:
      description: The language to localize the label
      in: query
      name: lang
      required: false
      schema:
        type: string
    page:
      description: Specific result page
      in: query
      name: page
      schema:
        type: integer
        default: 1
        minimum: 1
    productIds:
      description: Get one or more products by productIds (comma-separated)
      example:
      - ""
      in: path
      name: productIds
      required: true
      schema:
        type: array
        items:
          type: string
    query:
      description: Fulltext search query string
      in: query
      name: q
      schema:
        type: string
    type:
      description: Page Type
      in: query
      name: type
      required: true
      schema:
        type: string
        enum:
        - category
        - product
        - content
    url:
      description: Storefront Url
      in: query
      name: url
      required: true
      schema:
        type: string
        format: url
  responses:
    BadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Missing or incorrect parameters
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Shop backend is not available or other issues with the server
    NotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Requested resource can not be found
    NotImplementedError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Endpoint is not implemented
    UnauthorizedError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Authentication information is missing or invalid
  schemas:
    Category:
      type: object
      properties:
        children:
          type: array
          description: Nested categories containing an id and a label
          items:
            $ref: '#/components/schemas/Category'
        id:
          type: string
          description: "Unique Identifier. Commas, backslashes or whitespace characters\
            \ are forbidden"
          pattern: " ^[^,\\\\\\s]+$"
        label:
          type: string
          description: Localized label
      required:
      - id
      - label
    Content:
      type: object
      properties:
        label:
          type: object
          additionalProperties:
            type: string
            description: Localized label
          description: Localized label
          properties:
            empty:
              type: boolean
        pageUid:
          type: string
          description: The uid of the page used in FirstSpirit.
        path:
          type: object
          additionalProperties:
            type: string
            description: Localized path
          description: Localized path
          properties:
            empty:
              type: boolean
        released:
          type: boolean
          description: Defines visibility of a page.
        template:
          type: string
          description: The name of the template used in FirstSpirit.
      required:
      - label
      - path
      - template
    Error:
      type: object
      properties:
        error:
          type: string
    Extracted:
      type: object
      properties:
        extract:
          type: string
          description: Extract. Representative text for the text extract.
        id:
          type: string
          description: "Unique Identifier. Commas, backslashes or whitespace characters\
            \ are forbidden"
          pattern: " ^[^,\\\\\\s]+$"
        label:
          type: string
          description: Localized label
      required:
      - id
      - label
    IdProviding:
      type: object
      properties:
        id:
          type: string
          description: "Unique Identifier. Commas, backslashes or whitespace characters\
            \ are forbidden"
          pattern: " ^[^,\\\\\\s]+$"
      required:
      - id
    IdentifierObject:
      type: object
      properties:
        id:
          type: string
          description: "Unique Identifier. Commas, backslashes or whitespace characters\
            \ are forbidden"
          pattern: " ^[^,\\\\\\s]+$"
        lang:
          type: string
          description: Language to localize the label
        type:
          type: string
          description: Page Type
          enum:
          - category
          - product
          - contentpage
      required:
      - id
      - type
    Labelled:
      type: object
      properties:
        id:
          type: string
          description: "Unique Identifier. Commas, backslashes or whitespace characters\
            \ are forbidden"
          pattern: " ^[^,\\\\\\s]+$"
        label:
          type: string
          description: Localized label
      required:
      - id
      - label
    LocalizedString:
      type: object
      additionalProperties:
        type: string
        description: Localized path
      description: Localized path
      properties:
        empty:
          type: boolean
    Product:
      type: object
      properties:
        extract:
          type: string
          description: Extract. Representative text for the text extract.
        id:
          type: string
          description: "Unique Identifier. Commas, backslashes or whitespace characters\
            \ are forbidden"
          pattern: " ^[^,\\\\\\s]+$"
        image:
          type: string
          format: url
          description: Image URL used for the flyout. Image will be scaled down if
            width exceeds 30vw.
        label:
          type: string
          description: Localized label
        thumbnail:
          type: string
          format: url
          description: Thumbnail URL. Thumbnail will be scaled down if size exceeds
            100x100 pixels.
      required:
      - id
      - label
    StorefrontUrl:
      type: object
      properties:
        url:
          type: string
          format: url
          description: Storefront URL
  securitySchemes:
    basicAuth:
      scheme: basic
      type: http
